module Colife.Pattern exposing (beehive, blinker, block, glider, init, toad)

import String exposing (lines, trim)

import Colife.Model exposing (State(Alive, Dead))

beehive : List (List State)
beehive =
  parse """
DAAD
ADDA
DAAD
"""

blinker : List (List State)
blinker =
  parse """
DDD
AAA
DDD
"""

block : List (List State)
block =
  parse """
AA
AA
"""

glider : List (List State)
glider =
  parse """
DAD
DDA
AAA
"""

init : List (List State)
init =
  parse """
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDADDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDADADDDDDDDDDDDD
DDDDDDDDDDDDDAADDDDDDAADDDDDDDDDDDDAAD
DDDDDDDDDDDDADDDADDDDAADDDDDDDDDDDDAAD
DAADDDDDDDDADDDDDADDDAADDDDDDDDDDDDDDD
DAADDDDDDDDADDDADAADDDDADADDDDDDDDDDDD
DDDDDDDDDDDADDDDDADDDDDDDADDDDDDDDDDDD
DDDDDDDDDDDDADDDADDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDAADDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
"""

toad : List (List State)
toad =
  parse """
DDDD
DAAA
AAAD
DDDD
"""

parse : String -> List (List State)
parse =
  List.map parseLine << lines << trim

parseLine : String -> List State
parseLine str =
  case String.uncons str of
    Nothing -> []
    Just ('A', rest) -> Alive :: parseLine rest
    Just (_, rest) -> Dead :: parseLine rest
